# These are instructions to setup a Ubuntu virtual machine for the examples in
# this chapter. The first part of the instructions must be done manually. The
# last half can be done by executing this file as a script as instructed.

# Download VirtualBox and install

# Download Ubuntu desktop install and save on local disk [ubuntu-18.04.2-desktop-amd64.iso]
# Download VBoxGuestAdditions.iso
# On Mac already at /Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso

# Setup new machine
# See the README.autovirtualbox script for directions for setting up base virtual machine

# sign in

# click through whats new

# select dots at bottom left and terminal

# Reboot to get cut and paste and screen size fixed

# Add user to sudo list if needed
# su
# visudo
# add %vboxsf ALL=(ALL) ALL
# exit

# sudo apt-get install -y git

# Need script on guest to execute
# git clone --recursive https://github.com/essentialsofparallelcomputing/Chapter5.git
# Run the script Chapter5/README.virtualbox

sudo apt-get update && \
sudo apt-get install -y cmake git vim gcc g++ gfortran software-properties-common \
             python3 wget gnupg-agent \
             mpich libmpich-dev \
             openmpi-bin openmpi-doc libopenmpi-dev && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

# Installing latest GCC compiler (version 8) for best vectorization
sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
sudo apt-get update && \
sudo apt-get install -y gcc-8 g++-8 gfortran-8 \
                        gcc-9 g++-9 gfortran-9 && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

sudo update-alternatives --install /usr/bin/gcc       gcc       /usr/bin/gcc-8 90 \
                         --slave   /usr/bin/g++       g++       /usr/bin/g++-8 \
                         --slave   /usr/bin/gfortran  gfortran  /usr/bin/gfortran-8 \
                         --slave   /usr/bin/gcov      gcov      /usr/bin/gcov-8

sudo update-alternatives --install /usr/bin/gcc       gcc       /usr/bin/gcc-9 80 \
                         --slave   /usr/bin/g++       g++       /usr/bin/g++-9 \
                         --slave   /usr/bin/gfortran  gfortran  /usr/bin/gfortran-9 \
                         --slave   /usr/bin/gcov      gcov      /usr/bin/gcov-9

# Installing Intel compiler since it gives the best vectorization across compiler vendors
pushd /tmp
wget -q https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
sudo rm -f GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
popd

echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
echo "deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu bionic main" | sudo tee /etc/apt/sources.list.d/intel-graphics.list
sudo apt-get update && \
sudo apt-get install -y \
             intel-basekit-getting-started \
             intel-hpckit-getting-started \
             intel-oneapi-common-vars \
             intel-oneapi-common-licensing \
             intel-oneapi-dev-utilities \
             intel-oneapi-icc \
             intel-oneapi-ifort \
             intel-opencl && \
sudo apt-get clean && \
sudo rm -rf /var/lib/apt/lists/*

# Generic OpenCL Loader                                                                                     |      ------------------------------------------------------------------------------------------------------------
sudo apt-get update && \                                                                                     |      ------------------------------------------------------------------------------------------------------------
sudo apt-get install -y clinfo ocl-icd-libopencl1 ocl-icd-* opencl-headers && \                              |      ------------------------------------------------------------------------------------------------------------
sudo apt-get clean && \                                                                                      |      ------------------------------------------------------------------------------------------------------------
sudo rm -rf /var/lib/apt/lists/*                                                                             |      ------------------------------------------------------------------------------------------------------------

# Nvidia GPU software for computation                                                                       |      ------------------------------------------------------------------------------------------------------------
wget -q https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_|      ------------------------------------------------------------------------------------------------------------
sudo RUN dpkg -i cuda-repo-ubuntu1804_10.2.89-1_amd64.deb                                                        |      ------------------------------------------------------------------------------------------------------------
                                                                                                         |      ------------------------------------------------------------------------------------------------------------
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2|      ------------------------------------------------------------------------------------------------------------
sudo apt-get update && \
sudo apt-get install -y cuda-drivers nvidia-opencl-dev && \                                |      ------------------------------------------------------------------------------------------------------------
sudo apt-get clean && \                                                                                      |   40     apt-get clean && \                                                                                      
sudo rm -rf /var/lib/apt/lists/*                                                                             |   41     rm -rf /var/lib/apt/lists/*                                                                             

# ROCm software installation                                                                                |   43 # Needed libraries for Intel Advisor graphics user interface                                                
sudo apt-get update && \                                                                                     |   44 RUN apt-get update && \                                                                                     
sudo apt-get install -y libnuma-dev && \                                                                     |   45     apt-get install -y libgtk2.0-0 libxxf86vm1 libsm6 libnss3 libnss3 libx11-xcb1 libxtst6 \                
sudo apt-get clean && \                                                                                      |   46             libasound2 libatk-bridge2.0-0 && \                                                              
sudo rm -rf /var/lib/apt/lists/*                                                                             |      ------------------------------------------------------------------------------------------------------------
                                                                                                |      ------------------------------------------------------------------------------------------------------------
wget -qO - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | apt-key add -                          |      ------------------------------------------------------------------------------------------------------------
sudo echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main' >> /etc/apt/sources.list.d/r|      ------------------------------------------------------------------------------------------------------------
sudo apt-get update && \                                                                                     |      ------------------------------------------------------------------------------------------------------------
sudo apt-get install -y rocm-opencl-dev rocm-dkms && \                                                       |      ------------------------------------------------------------------------------------------------------------
sudo apt-get clean && \                                                                                      |      ------------------------------------------------------------------------------------------------------------
sudo rm -rf /var/lib/apt/lists/*                                                                             |      ------------------------------------------------------------------------------------------------------------

# Vendor OpenCL                                                                                             |      ------------------------------------------------------------------------------------------------------------
sudo apt-get update && \                                                                                     |      ------------------------------------------------------------------------------------------------------------
sudo apt-get install -y mesa-opencl-icd && \                                                                 |      ------------------------------------------------------------------------------------------------------------
sudo apt-get clean && \                                                                                      |   47     apt-get clean && \                                                                                      
sudo rm -rf /var/lib/apt/lists/*                                                                             |   48     rm -rf /var/lib/apt/lists/*                                                                             

# If Software updater prompts, install updated software --> wait ....

PATH=${PATH}:/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin/x86_64                           |      ------------------------------------------------------------------------------------------------------------
PATH=/usr/local/cuda-10.2/bin:/usr/local/cuda-10.2/NsightCompute-2019.1${PATH:+:${PATH}}                |      ------------------------------------------------------------------------------------------------------------
LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}                       |      ------------------------------------------------------------------------------------------------------------
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/intel/inteloneapi/compiler/2021.1-beta04/linux/compiler/lib/inte|      ------------------------------------------------------------------------------------------------------------

